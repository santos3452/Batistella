version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    ports:
      - "${POSTGRES_PORT_EXTERNAL}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    networks:
      - batistella-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx-gateway:
    image: nginx:1.25-alpine
    container_name: ${NGINX_CONTAINER_NAME}
    ports:
      - "80:80"
    volumes:
      - ./Bati/nginx-gateway/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Bati/nginx-gateway/conf/gateway.conf:/etc/nginx/conf.d/default.conf:ro
      - ./Bati/nginx-gateway/html:/usr/share/nginx/html:ro
      - ./Bati/nginx-gateway/logs:/var/log/nginx
    depends_on:
      - frontend
      - usersandlogin
      - productsandorder
      - payments
      - notifications
      - dashboards
    networks:
      - batistella-network
    restart: unless-stopped

  frontend:
    build:
      context: ./FrontEnd/BatistellaFront
      dockerfile: Dockerfile.prod
    container_name: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_PORT_EXTERNAL}:80"
    environment:
      - NODE_ENV=production
      - API_URL=${APP_BASE_URL}
    networks:
      - batistella-network
    restart: unless-stopped

  usersandlogin:
    build:
      context: ./UsersAndLogin
      dockerfile: Dockerfile
    container_name: ${USERS_CONTAINER_NAME}
    ports:
      - "${USERS_PORT_EXTERNAL}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${USERS_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - NOTIFICATION_SERVICE_URL=http://notifications:8080
      - APP_BASE_URL=${APP_BASE_URL}
      - APP_FRONTEND_URL=${APP_FRONTEND_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - batistella-network
    restart: unless-stopped

  productsandorder:
    build:
      context: ./ProductsAndOrder
      dockerfile: Dockerfile
    container_name: ${PRODUCTS_CONTAINER_NAME}
    ports:
      - "${PRODUCTS_PORT_EXTERNAL}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${PRODUCTS_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - MICROSERVICE_USUARIOS_URL=http://usersandlogin:8080/api/users
      - MICROSERVICE_PAYMENT_URL=http://payments:8084/api/pagos/estado/{codigoPedido}
      - JWT_SECRET=${JWT_SECRET}
      - APP_BASE_URL=${APP_BASE_URL}
      - GATEWAY_URL=${APP_BASE_URL}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME:-batistella-product-images}
      - GCP_CREDENTIALS_LOCATION=${GCP_CREDENTIALS_LOCATION:-credentials/batistella-service-account.json}
      - GCP_IMAGE_URL_EXPIRATION=${GCP_IMAGE_URL_EXPIRATION:-86400}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/resources/credentials/batistella-service-account.json
    volumes:
      - ./ProductsAndOrder/src/main/resources/credentials:/app/resources/credentials
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - batistella-network
    restart: unless-stopped

  payments:
    build:
      context: ./Payments
      dockerfile: Dockerfile
    container_name: ${PAYMENTS_CONTAINER_NAME}
    ports:
      - "${PAYMENTS_PORT_EXTERNAL}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${PAYMENTS_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - APP_BASE_URL=${APP_BASE_URL}
      - APP_FRONTEND_URL=${APP_FRONTEND_URL}
      - MERCADOPAGO_ACCESS_TOKEN=${MERCADOPAGO_ACCESS_TOKEN}
      - MERCADOPAGO_PUBLIC_KEY=${MERCADOPAGO_PUBLIC_KEY}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - MICROSERVICE_NOTIFICATIONS_URL=http://notifications:8085
      - MICROSERVICE_PEDIDOS_URL=http://productsandorder:8083
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - batistella-network
    restart: unless-stopped

  notifications:
    build:
      context: ./Notifications
      dockerfile: Dockerfile
    container_name: ${NOTIFICATIONS_CONTAINER_NAME}
    ports:
      - "${NOTIFICATIONS_PORT_EXTERNAL}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${NOTIFICATIONS_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - APP_BASE_URL=${APP_BASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - batistella-network
    restart: unless-stopped

  dashboards:
    build:
      context: ./Dashboards
      dockerfile: Dockerfile
    container_name: ${DASHBOARDS_CONTAINER_NAME}
    ports:
      - "${DASHBOARDS_PORT_EXTERNAL}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8086
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - APP_BASE_URL=${APP_BASE_URL}
      - APP_FRONTEND_URL=${APP_FRONTEND_URL}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - USERS_SERVICE_URL=http://usersandlogin:8080
      - MICROSERVICE_PEDIDOS_ORDERS_URL=http://productsandorder:8083
      - PAYMENTS_SERVICE_URL=http://payments:8084
      - NOTIFICATIONS_SERVICE_URL=http://notifications:8085
    depends_on:
      - usersandlogin
      - productsandorder
      - payments
      - notifications
    networks:
      - batistella-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - batistella-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:

networks:
  batistella-network:
    driver: bridge
